class TonClientError(Exception):
    pass


class CreateClientError(TonClientError):
    """
    Exception raised for errors occurring during client creation.
    """
    def __init__(self, message="Unable to create client"):
        self.message = message
        super().__init__(self.message)


class CloseClientError(TonClientError):
    """
    Exception raised for errors occurring during client closure.
    """
    def __init__(self, message="Unable to close client"):
        self.message = message
        super().__init__(self.message)


class GetTransactionsError(TonClientError):
    """
    Exception raised for errors occurring during transaction retrieval.
    """
    def __init__(self, message="An error occurred while getting transactions"):
        self.message = message
        super().__init__(self.message)


class MongoError(Exception):
    """
    Base class for exceptions in this module.
    All exceptions generated by MongoDB operations should inherit from this class.
    """
    pass


class MongoConnectionError(MongoError):
    """
    Exception raised for errors occurring during connection to the MongoDB server.

    Attributes:
        message -- explanation of the error
    """

    def __init__(self, message="Unable to connect to the MongoDB server"):
        self.message = message
        super().__init__(self.message)


class InsertError(MongoError):
    """
    Exception raised for errors occurring during data insertion into MongoDB.

    Attributes:
        message -- explanation of the error
    """

    def __init__(self, message="An error occurred while inserting data into MongoDB"):
        self.message = message
        super().__init__(self.message)


class GetOneError(MongoError):
    """
    Exception raised for errors occurring during data retrieval from MongoDB.

    Attributes:
        message -- explanation of the error
    """

    def __init__(self, message="An error occurred while retrieving data from MongoDB"):
        self.message = message
        super().__init__(self.message)


class GetManyError(MongoError):
    """
    Exception raised for errors occurring during data retrieval from MongoDB.

    Attributes:
        message -- explanation of the error
    """

    def __init__(self, message="An error occurred while retrieving data from MongoDB"):
        self.message = message
        super().__init__(self.message)


class DeleteError(MongoError):
    """
    Exception raised for errors occurring during data deletion from MongoDB.

    Attributes:
        message -- explanation of the error
    """

    def __init__(self, message="An error occurred while deleting data from MongoDB"):
        self.message = message
        super().__init__(self.message)


class UpdateError(MongoError):
    """
    Exception raised for errors occurring during data update in MongoDB.

    Attributes:
        message -- explanation of the error
    """

    def __init__(self, message="An error occurred while updating data in MongoDB"):
        self.message = message
        super().__init__(self.message)


class TransactionManagerError(Exception):
    """
    Base class for exceptions in this module.
    All exceptions generated by the TransactionManager class should inherit from this class.
    """
    pass


class StoreNewTransactionsError(TransactionManagerError):
    """
    Exception raised for errors occurring during storing new transactions.
    """
    def __init__(self, message="An error occurred while storing new transactions"):
        self.message = message
        super().__init__(self.message)


class GetNewTransactionsError(TransactionManagerError):
    """
    Exception raised for errors occurring during getting new transactions.
    """
    def __init__(self, message="An error occurred while getting new transactions"):
        self.message = message
        super().__init__(self.message)


class UpdateLatestTransactionError(TransactionManagerError):
    """
    Exception raised for errors occurring during updating the latest transaction.
    """
    def __init__(self, message="An error occurred while updating the latest transaction"):
        self.message = message
        super().__init__(self.message)


class CheckTransactionsError(TransactionManagerError):
    """
    Exception raised for errors occurring during checking transactions.
    """
    def __init__(self, message="An error occurred while checking transactions"):
        self.message = message
        super().__init__(self.message)


class GetOldLatestTransactionError(TransactionManagerError):
    """
    Exception raised for errors occurring during getting the old latest transaction.
    """
    def __init__(self, message="An error occurred while getting the old latest transaction"):
        self.message = message
        super().__init__(self.message)
